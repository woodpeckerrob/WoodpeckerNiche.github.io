---
title: "Point Counts"
editor: visual
---

# Point count results

Avian communities are often sampled with point count surveys, and for good reason. Point counts in this study will provide information on the grater cavity-nesting bird community which is important for understanding competition and community assemblages as they relate to environmental variables. Below are some preliminary results on each of the four sites with simple models using the spAbundance package in R. These models vary detection probability by species only and provide estimates on species abundance with associated confidence intervals.

```{r}
#| echo: false
#| include: false
#| message: false

#####    load packages and functions    #####

{
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(knitr)
  library(tidyr)
  #library(Distance)
  library(spAbundance)
  library(purrr)
  library(lubridate)
  library(ggplot2)
  #library(unmarked)
  library(lubridate)
  library(abind)

}

funk <- function(x){length(unique(x))}



```

```{r}
#| echo: false
#| include: false
#| message: false

#####    load data    #####
#
# load each raw data file
survey <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\order_of_point_count_surveys.csv")
pc <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\raw\\point_count_data.csv")
sites <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\raw\\point_count_id_site_crosswalk.csv")
truncation_dist <- 200


# Filter and prepare data
pc <- pc %>%
  filter(!is.na(real_distance_m)) %>%
  filter(!species %in% c("YBSA", "WODU","BASP")) %>%
  left_join(sites, by = "point_id") %>%
  mutate(date = mdy(date)) %>%
  group_by(point_id, date) %>%
  mutate(visit_date = first(date)) %>%
  ungroup() %>%
  arrange(point_id, visit_date) %>%
  group_by(point_id) %>%
  mutate(visit = dense_rank(visit_date)) %>%
  ungroup()

# Only keep primary observer’s double observer records
do <- pc %>%
  filter(double_obs == "y", observer == "RTM")

pc <- pc %>%
  filter(double_obs == "") %>%
  bind_rows(do)

# Encode point_id as numeric
pc$point_id <- as.numeric(pc$point_id)
#pc$site_name <- as.numeric(as.factor(pc$site_name))

# Define species, sites, and number of replicates
species_list <- unique(pc$species)
site_list <- unique(pc$point_id)
n_species <- length(species_list)
n_sites <- length(site_list)
n_replicates <- pc %>%
  group_by(point_id) %>%
  summarize(n_visits = n_distinct(visit)) %>%
  pull(n_visits) %>%
  max()

# Initialize y array
y_array <- array(0, dim = c(n_species, n_sites, n_replicates),
                 dimnames = list(species = species_list, site = site_list, visit = 1:n_replicates))

# Fill y array with counts per species/site/visit
for (s in seq_along(species_list)) {
  species_name <- species_list[s]
  for (p in seq_along(site_list)) {
    site_id <- site_list[p]
    for (v in 1:n_replicates) {
      y_array[s, p, v] <- pc %>%
        filter(species == species_name, point_id == site_id, visit == v) %>%
        nrow()
    }
  }
}



# Create detection covariates for each point_id × visit

det_covs <- pc %>%
  group_by(point_id, visit) %>%
  summarize(wind = first(wind),
            sky = first(sky),
            observer = first(observer), 
            .groups = "drop") %>%
  arrange(point_id, visit)

det_covs_matrix <- det_covs %>%
  pivot_wider(names_from = visit, values_from = c(wind, sky, observer)) %>%
  arrange(point_id)

wind_mat <- det_covs_matrix %>%
  select(starts_with("wind_")) %>%
  as.matrix()
wind_mat[is.na(wind_mat)] <- 0

sky_mat <- det_covs_matrix %>%
  select(starts_with("sky_")) %>%
  as.matrix()
sky_mat[is.na(sky_mat)] <- 0

observer_mat <- det_covs_matrix %>%
  select(starts_with("observer_")) %>%
  as.data.frame()
# as.matrix()
#observer_mat <- apply(observer_mat, 2, function(x) as.numeric(as.factor(x)))
observer_mat[is.na(observer_mat)] <- "RTM"

det_covs_list <- list(
  wind = wind_mat,
  sky = sky_mat,
  observer = observer_mat
)

site_covs <- pc %>%
  select(point_id, site_name) %>%
  distinct() %>%
  arrange(point_id)

site_covs <- site_covs %>%
  filter(point_id %in% site_list) %>%
  arrange(factor(point_id, levels = site_list))

site_covs <- site_covs %>%
  select(site_name)

# Abundance and detection formulas
abund_formula <- ~ site_name 
det_formula <- ~ wind + sky + observer

# Package data for spAbundance
data_list <- list(
  y = y_array,
  det.covs = det_covs_list,
  abund.covs = site_covs
)

# Priors and tuning can be kept the same
priors <- list(
  beta.comm.normal = list(0, 100),
  alpha.comm.normal = list(0, 100),
  tau.sq.beta.ig = list(0.1, 0.1),
  tau.sq.alpha.ig = list(0.1, 0.1),
  sigma.sq.mu.ig = list(0.1, 0.1),
  sigma.sq.p.ig = list(0.1, 0.1)
)

# Fit the N-mixture model
out_nmix <- msNMix(
  abund.formula = abund_formula,
  det.formula = det_formula,
  data = data_list,
  priors = priors,
  tuning = list(
    beta = 0.1,
    alpha = 0.1
  ),
  inits = list(),
  n.batch = 1000,  #2000 can do more but similar results
  batch.length = 10,
  accept.rate = 0.43,
  family = "Poisson",
  n.omp.threads = 1,
  verbose = TRUE,
  n.report = 50,
  n.burn = 200,
  n.thin = 2,
  n.chains = 1 # can do 2 but similar results
)

globalmod <- (out_nmix)

# Extract the summary output

fit_vals <- fitted(out_nmix, type = "marginal")



# Step 1: Sum over visits (4th dim) → iterations × species × site
total_abundance <- apply(fit_vals$y.rep.samples, c(1, 2, 3), sum)

# Step 2: Summarize over iterations for each species × site
n_iter <- dim(total_abundance)[1]
n_species <- dim(total_abundance)[2]
n_sites <- dim(total_abundance)[3]

summary_list <- vector("list", length = n_species * n_sites)
k <- 1
for (s in 1:n_species) {
  for (p in 1:n_sites) {
    values <- total_abundance[, s, p]
    summary_list[[k]] <- data.frame(
      species = species_list[s],
      point_id = site_list[p],
      mean = mean(values),
      lower = quantile(values, 0.025),
      upper = quantile(values, 0.975)
    )
    k <- k + 1
  }
}

df_plot <- do.call(rbind, summary_list)




```



## Summary plots for results thus far...

```{r}
#| echo: false
#| message: false

#plotting


ggplot(df_plot, aes(x = factor(point_id), y = mean, fill = species)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = lower, ymax = upper),
                position = position_dodge(width = 0.9),
                width = 0.3) +
  facet_wrap(~ species) +
  theme_bw() +
  theme(
    axis.title = element_blank(),  # removes x and y axis titles
    legend.position = "none"  # Hide legends from individual plots
  ) +    
  geom_vline(xintercept = 7.5, linetype="dotted", 
             color = "black", linewidth=1.5)+
  geom_vline(xintercept = 14.5, linetype="dotted", 
             color = "black", linewidth=1.5)+
  geom_vline(xintercept = 23.5, linetype="dotted", 
             color = "black", linewidth=1.5)+
  ylim(0,30)+
  scale_y_continuous(expand=c(0, 0))+ 
  labs(x = "Point ID", y = "Estimated Abundance", fill = "Species") +
  theme(axis.text.x = element_text(angle = 90))
# to save it call it object g and run the next line
#ggsave("point_count_densities.png",g,dpi=300,height=7,width=9)
```

This plot (above) shows the abundance estimates for cavity nesting species at each study site (separated by vertical dashed lines). This data represents only March and April 2025 since that's what we have entered into excel thus far. Species estimates are shown with their corresponding 95% credible intervals.



# How long should a point count be?

In this study we are doing 10min point counts. It could be that 10min is too long, and most of the species we detect will be detected in a shorter amount of time. If so, we may be able to do shorter point counts but we don't want to risk lowering our detection of birds that are more difficult to detect (those that are quiet or rare). Let's look at a simple species accumulation curve...

```{r}
#| echo: false
#| include: false
#| message: false

#how long is long enough for a point count? an analysis in unmarked


# convert mm:ss to numeric minutes
pc_clean <- pc %>%
  mutate(
    time_mins = as.numeric(ms(time_detected)) / 60  
  )

# Step 1: Keep only the FIRST detection per species per visit (point_id + visit)
pc_unique <- pc_clean %>%
  arrange(point_id, visit, species, time_mins) %>%
  group_by(point_id, visit, species) %>%
  slice_head(n = 1) %>%  # keep only first detection per species per visit
  ungroup()

# Step 2: Bin by time again
pc_binned <- pc_unique %>%
  mutate(time_bin = cut(time_mins,
                        breaks = seq(0, 10, by = 2),
                        labels = c("0-2", "2-4", "4-6", "6-8", "8-10"),
                        right = FALSE))

# Step 3: Count number of species per visit per time bin
richness_per_visit <- pc_binned %>%
  group_by(point_id, visit, time_bin) %>%
  summarise(richness = n_distinct(species), .groups = "drop")

# Step 4: Pivot and calculate cumulative richness
richness_wide <- richness_per_visit %>%
  pivot_wider(names_from = time_bin, values_from = richness, values_fill = 0)


#
# Time bin order
time_bin_order <- c("0-2", "2-4", "4-6", "6-8", "8-10")

# Extract just the time bin values, do row-wise cumsum, and bind back
richness_cum <- richness_wide %>%
  select(point_id, visit, all_of(time_bin_order)) %>%
  mutate(across(all_of(time_bin_order), as.numeric))  # ensure numeric just in case

# Apply row-wise cumsum to only the bin columns
cumulative_bins <- t(apply(richness_cum[time_bin_order], 1, cumsum))  # returns a matrix

# Bind back to original identifiers
richness_cum_final <- bind_cols(
  richness_wide %>% select(point_id, visit),
  as.data.frame(cumulative_bins)
)

# Set correct column names
colnames(richness_cum_final)[-(1:2)] <- time_bin_order

# Check
head(richness_cum_final)


#



# Step 5: Average across visits per point
richness_mean_by_plot <- richness_cum_final %>%
  group_by(point_id) %>%
  summarise(across(`0-2`:`8-10`, mean), .groups = "drop")

# Reshape to long format for plotting
richness_long <- richness_mean_by_plot %>%
  pivot_longer(cols = `0-2`:`8-10`, names_to = "TimeBin", values_to = "MeanRichness")

# Ensure time bins are ordered properly
richness_long$TimeBin <- factor(richness_long$TimeBin, levels = c("0-2", "2-4", "4-6", "6-8", "8-10"))

richness_overall <- richness_long %>%
  group_by(TimeBin) %>%
  summarise(MeanRichness = mean(MeanRichness))



```

```{r}
#| echo: false
#| message: false

#plot the curve
ggplot(richness_long, aes(x = TimeBin, y = MeanRichness, group = factor(point_id), color = factor(point_id))) +
  geom_line(alpha = 0.3) +
  geom_line(data = richness_overall, aes(x = TimeBin, y = MeanRichness, group = 1), color = "black", size = 1.5) +
  labs(
    title = "",
    x = "Time Bin (min)",
    y = "Mean Cumulative Species Richness"
  ) +
  scale_y_continuous(breaks = c(0:7),limits = c(0, 7), expand = c(0, 0))+
  theme_bw() +
  theme(legend.position = "none")
```

Looks like modest accumulation with no sharp increase and plateau seen across plots with some variation between plots. The variation between plots could be random noise.

# Point count schedule by month

The following are the scheduled order of point counts to conduct per visit to the site. This ensures that community data obtained isn't biased by lower or higher detections thoughout the day.

## April

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## May

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## June

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## July

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## August

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```
