---
title: "Woodpecker Observations"
---

Woodpecker observation data collected thus far. Data is arranged by plot, species, and month.

```{r}
#| echo: false
#| include: false
#| message: false

#####    load packages and functions    #####

{
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(plot3D)
  library("plot3Drgl")
  library(knitr)
  library(tidyr)
  library(tidyverse)
  library(hypervolume)
}

funk <- function(x){length(unique(x))}

```
```{r}
#| echo: false
#| include: false
#| message: false

#####    load data    #####
#
# load each raw data file
parent_form <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\raw\\form-1__woodpecker-obs.csv")
child_form <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\raw\\form-2__behaviors.csv")
# merge them into one dataframe

df <- merge(x=parent_form,y=child_form,by.x="ec5_uuid",by.y="ec5_parent_uuid")

# remove columns no longer needed
{
  df$created_at.x <- NULL
  df$created_at.y <- NULL
  df$uploaded_at.x <- NULL
  df$uploaded_at.y <- NULL
  df$title.x <- NULL
  df$title.y <- NULL
  df$ec5_uuid.y <- NULL
  df$ec5_uuid <- NULL
  #provide a unique ref number
  df$obs_id <- 1:nrow(df)
}

# remove any observation that is not a foraging observation

df <- df|>
  filter(X10_Foraging_type !="Other (includes not foraging)")|>
  filter(X9_Is_it_a_juvenile !="Yes")
df$X6_date <- as.Date(df$X6_date, format = "%m/%d/%Y")
df$month <- as.numeric(format(df$X6_date, "%m"))
df$X3_Plot_number <- as.numeric(df$X3_Plot_number)

#fix hawking and ground so it's consistent and there's no tree info

dftest <- df %>%
  mutate(X11_Substrate = if_else(X10_Foraging_type == "Hawking", "air", X11_Substrate)) %>%
    mutate(X12_where = if_else(X10_Foraging_type == "Hawking", "air", X12_where)) %>%
  mutate(X11_Substrate = if_else(X12_where == "ground", "ground", X11_Substrate))%>%
    mutate(X12_where = if_else(X10_Foraging_type == "ground", "ground", X12_where))


```

```{r}
#| echo: false
#| message: false
#| include: false

# Summarize the data by month, species, and plot
summary_table <- df %>%
  group_by(month, X8_Species, X3_Plot_number) %>%
  summarise(count = n(), .groups = 'drop')

# Pivot the data into a wide format: each plot is a column, and each species is a row
pivoted_data <- summary_table %>%
  pivot_wider(names_from = X3_Plot_number, values_from = count, values_fill = list(count = 0))


# Columns we expect to have (1:32)
expected_columns <- as.character(1:32)

# Get the columns that are currently in the dataframe
current_columns <- colnames(pivoted_data)

# Identify the missing columns
missing_columns <- setdiff(expected_columns, current_columns)

# Add missing columns with all values set to 0
for (col in missing_columns) {
  pivoted_data[[col]] <- 0
}
ordered_columns <- c("month", "X8_Species", sort(as.numeric( grep("^\\d+$", names(pivoted_data), value = TRUE))))  # Sort plot columns numerically
pivoted_data <- pivoted_data %>% select(all_of(ordered_columns))
colnames(pivoted_data) <- c("month","Species",1:32)

```


```{r}
#| echo: false
#| message: false
#| include: false

# Plotting species composition by plot thus far


# Step 1: Combine across months
tab_combined <- pivoted_data %>%
  group_by(Species) %>%
  summarise(across(`1`:`32`, \(x) sum(x, na.rm = TRUE)))

# Step 2: Reshape to long format
tab_long <- tab_combined %>%
  pivot_longer(
    cols = -Species,
    names_to = "Plot",
    values_to = "Count"
  )

# Step 3: Convert Plot to factor
tab_long$Plot <- factor(tab_long$Plot, levels = as.character(1:32))

# Step 4: Calculate percentages and totals
tab_pct <- tab_long %>%
  group_by(Plot) %>%
  mutate(Percent = Count / sum(Count, na.rm = TRUE) * 100) %>%
  ungroup()

# Step 5: Get total counts per plot for labels
plot_totals <- tab_long %>%
  group_by(Plot) %>%
  summarise(TotalCount = sum(Count, na.rm = TRUE))

# Step 6: Plot with total count labels
sp_comp_plot <- ggplot(tab_pct, aes(x = Plot, y = Percent, fill = Species)) +
  geom_bar(stat = "identity") +
  geom_text(data = plot_totals, aes(x = Plot, y = 102, label = TotalCount),
            inherit.aes = FALSE, size = 3, vjust = 0) +
  scale_fill_brewer(palette = "Paired") +
  labs(
    title = "Woodpecker Composition by Plot (All Months Combined)",
    subtitle = "Total count shown above each bar",
    x = "Plot",
    y = "Percentage of Observations"
  ) +
  coord_cartesian(ylim = c(0, 110)) +  # Give space above 100% for the labels
  scale_y_continuous(expand=c(0, 0))+ 
  theme_classic() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))

# Sum across plot columns (columns 3 to 34)
pivoted_summary <- pivoted_data %>%
  mutate(Total = rowSums(select(., `1`:`32`))) %>%
  group_by(month, Species) %>%
  summarise(Total = sum(Total), .groups = 'drop')

# Plot using ggplot2
hist<-ggplot(pivoted_summary, aes(x = factor(month), y = Total, fill = Species)) +
  geom_col(position = "stack") +
  labs(x = "Month", y = "Total Observations", title = "Species Observations by Month") +
  scale_y_continuous(expand=c(0, 0))+ 
  theme_bw()
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: Figure 1
#| fig-cap: "Observations by species. numbers above the bar indicates the number of observations for each species."
#| fig-alt: "Species composition plot figure"
sp_comp_plot
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: Figure 2
#| fig-cap: "Species foraging observations by month"
#| fig-alt: "Species totals by month histogram"
hist
```


```{r}
#| echo: false
#| message: false
#| include: false
################################
##### getting hypervolumes #####

# need to convert each column to a percentage, then take each species by month if more than 5 obs are taken, and do hypervolume overlap

#make month col
#df$month_name <- format(df$X6_date, format = "%B")
#df$month_num <- format(df$X6_date, format = "%m")

#hyper_df <- df %>% dplyr::select("X8_Species","month_num","X10_Foraging_type","X11_Substrate","X12_where","X13_if_dead_decay_cla","X15_tree_size_class","X22_height_ratio","X16_time_spent_sec")
#colnames(hyper_df) <- c("species","month","foraging_type","substrate","where","decay_class","tree_size","height_ratio","time")
#hyper_df <- hyper_df[!apply(hyper_df == "", 1, any), ]


# Step 1: Bin the height_ratio values
#hyper_df_binned <- hyper_df %>%
#  mutate(
#    height_bin = case_when(
#      height_ratio == 0 ~ "0",
#      height_ratio >= 1 & height_ratio <= 25 ~ "1-25",
#      height_ratio >= 26 & height_ratio <= 50 ~ "26-50",
#      height_ratio >= 51 & height_ratio <= 75 ~ "51-75",
#      height_ratio >= 76 & height_ratio <= 100 ~ "76-100",
#      TRUE ~ "unknown"
#    )
#  )#%>%
#  select(species, foraging_type, substrate, where, decay_class, tree_size, height_bin, time)








```



# March Observations

```{r}
#| echo: false
#| message: false

tab <- subset(pivoted_data,pivoted_data$month==3)
tab$month <- NULL
# Check columns with sum equal to 0
zero_sum_columns <- colnames(tab[, -1])[colSums(tab[, -1]) == 0]  # Exclude non-numeric columns

# Print column names that have a sum of 0
if (length(zero_sum_columns) > 0) {
  cat(paste("Plot(s) with no observations include: ", paste(zero_sum_columns, collapse = ", ")))
} else {
  cat("Each plot has at least 1 observation of a woodpecker this month.")
}
```

```{r}
#| echo: false
#| message: false
print(kable(tab, caption = paste("March observations by species and plot")))
```

# April Observations

```{r}
#| echo: false
#| message: false

tab <- subset(pivoted_data,pivoted_data$month==4)
tab$month <- NULL
# Check columns with sum equal to 0
zero_sum_columns <- colnames(tab[, -1])[colSums(tab[, -1]) == 0]  # Exclude non-numeric columns

# Print column names that have a sum of 0
if (length(zero_sum_columns) > 0) {
  cat(paste("Plot(s) with no observations include: ", paste(zero_sum_columns, collapse = ", ")))
} else {
  cat("Each plot has at least 1 observation of a woodpecker this month.")
}
```

```{r}
#| echo: false
#| message: false
print(kable(tab, caption = paste("April observations by species and plot")))
```

# May Observations

```{r}
#| echo: false
#| message: false

tab <- subset(pivoted_data,pivoted_data$month==5)
tab$month <- NULL
# Check columns with sum equal to 0
zero_sum_columns <- colnames(tab[, -1])[colSums(tab[, -1]) == 0]  # Exclude non-numeric columns

# Print column names that have a sum of 0
if (length(zero_sum_columns) > 0) {
  cat(paste("Plot(s) with no observations include: ", paste(zero_sum_columns, collapse = ", ")))
} else {
  cat("Each plot has at least 1 observation of a woodpecker this month.")
}
```

```{r}
#| echo: false
#| message: false
print(kable(tab, caption = paste("May observations by species and plot")))
```

# June Observations


```{r}
#| echo: false
#| message: false

tab <- subset(pivoted_data,pivoted_data$month==6)
tab$month <- NULL
# Check columns with sum equal to 0
zero_sum_columns <- colnames(tab[, -1])[colSums(tab[, -1]) == 0]  # Exclude non-numeric columns

# Print column names that have a sum of 0
if (length(zero_sum_columns) > 0) {
  cat(paste("Plot(s) with no observations include: ", paste(zero_sum_columns, collapse = ", ")))
} else {
  cat("Each plot has at least 1 observation of a woodpecker this month.")
}
```

```{r}
#| echo: false
#| message: false
print(kable(tab, caption = paste("June observations by species and plot")))
```

## July coming soon...


```{r}
#| echo: false
#| message: false
#| include: false
#create hypervolumes





```



```{r}
#| echo: false
#| message: false
#| include: false

data_encoded <- cbind(
  df[, c("X16_time_spent_sec")],  # Keep the continuous columns
  model.matrix(~ X10_Foraging_type - 1, df), # One-hot encoding for 'species'
  model.matrix(~ X11_Substrate - 1, df), # One-hot encoding for 'condition'
  model.matrix(~ X12_where - 1, df) # One-hot encoding for 'condition'

)

# Standardize the data
data_scaled <- scale(data_encoded)

pca_result <- prcomp(data_scaled, center = TRUE, scale. = TRUE)

# Create a data frame for plotting
pca_df <- data.frame(pca_result$x)
```


```{r}
#| echo: false
#| message: false
#| include: false

#plotting the PCA
ggplot(pca_df, aes(x = PC1, y = PC2)) +
  geom_point() +
  ggtitle("PCA of Species Data with Multiple Columns") +
  xlab("Principal Component 1") +
  ylab("Principal Component 2")

```



