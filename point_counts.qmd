---
title: "Point Counts"
editor: visual
---

# Point count results

Avian communities are often sampled with point count surveys, and for good reason. Point counts in this study will provide information on the grater cavity-nesting bird community which is important for understanding competition and community assemblages as they relate to environmental variables. Below are some preliminary results on each of the four sites with simple models using the spAbundance package in R. These models vary detection probability by species only and provide estimates on species abundance with associated confidence intervals.

```{r}
#| echo: false
#| include: false
#| message: false

#####    load packages and functions    #####

{
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(knitr)
  library(tidyr)
  #library(Distance)
  library(spAbundance)
  library(purrr)
  library(lubridate)
  library(ggplot2)
  #library(unmarked)
  library(lubridate)
  library(abind)

}

funk <- function(x){length(unique(x))}



```

```{r}
#| echo: false
#| include: false
#| message: false

#####    load data    #####
#
# load each raw data file
survey <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\order_of_point_count_surveys.csv")
pc <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\raw\\point_count_data.csv")
sites <- read.csv("C:\\Users\\rmeyer\\Documents\\WoodpeckerNiche\\docs\\data\\raw\\point_count_id_site_crosswalk.csv")
truncation_dist <- 200
#edit data to have desired columns
pc <- pc[pc$real_distance_m <= truncation_dist, ]
pc <- pc %>%
  filter(!is.na(real_distance_m), real_distance_m <= truncation_dist) %>%
  filter(!species %in% c("YBSA", "WODU")) %>%
  filter(!double_obs %in% "y") %>%
  left_join(.,sites,by="point_id")
pc <- pc %>%
  # Convert date to Date format
  mutate(date = mdy(date)) %>%
  
  # Create visit number per point_id based on date order
  group_by(point_id, date) %>%
  mutate(visit_date = first(date)) %>%   # Ensures a single date per group
  ungroup() %>%
  arrange(point_id, visit_date) %>%
  group_by(point_id) %>%
  mutate(visit = dense_rank(visit_date)) %>%
  
  # Calculate max number of visits per point_id
  mutate(repeats = (n_distinct(visit_date))) %>% #effort in hours

  mutate(Effort = ((n_distinct(visit_date))*10)/60) %>% #effort in hours
  ungroup()
pc$point_id <- as.numeric(as.factor(pc$point_id))  #had error running model, needed random effects to be numeric, not even factors...
pc$site_name <- as.numeric(as.factor(pc$site_name))
#############################
##### latent factor Distance sampling #####


# needs number of bins to be 1 more than the number of replicates in third dimention of y
n_replicates <- pc %>%
  group_by(point_id, date) %>%
  summarize(n = n(), .groups = "drop") %>%
  group_by(point_id) %>%
  summarize(n_visits = n()) %>%
  pull(n_visits) %>%
  max()

dist.breaks <- seq(0, truncation_dist, length.out = n_replicates + 1)

# Bin the distance data
pc$dist_bin <- cut(pc$real_distance_m, breaks = dist.breaks, labels = FALSE, include.lowest = TRUE)

#need coords for the model to run
# Extract site coordinates
coords_df <- pc %>%
  group_by(point_id) %>%
  summarize(x = first(x), y = first(y)) %>%
  ungroup() %>%
  arrange(point_id)

coords_mat <- as.matrix(coords_df[, c("x", "y")])
rownames(coords_mat) <- coords_df$point_id


# Build the 3D y array
site_list <- unique(pc$point_id)
species_list <- unique(pc$species)

# Initialize array: species x sites x bins
y_array <- array(0, dim = c(length(species_list), length(site_list), n_replicates),
                 dimnames = list(species = species_list, site = site_list, bin = 1:n_replicates))

# Fill in counts
for (s in species_list) {
  for (p in site_list) {
    for (b in 1:n_replicates) {
      y_array[s, as.character(p), b] <- sum(pc$species == s & pc$point_id == p & pc$dist_bin == b)
    }
  }
}

# covs
covs <- pc %>%
  group_by(point_id, site_name) %>%
  summarize(wind = mean(wind, na.rm = TRUE),
            sky = mean(sky, na.rm = TRUE)) %>%
  ungroup()

covs$site <- as.character(covs$point_id)
rownames(covs) <- covs$site

# Abundance: differences between sites (random intercepts by site)
abund_formula <- ~  site_name

# Detection: wind and sky with random intercepts (or slopes) by site if needed
det_formula <- ~ wind + sky + (1 | point_id)

data_list <- list(
  y = y_array,
  covs = covs,
  dist.breaks = dist.breaks,
  offset = rep(pi * 200^2, length(site_list)),
  coords = coords_mat
)


priors <- list(
  beta.comm.normal = list(0, 100),
  alpha.comm.normal = list(0, 100),
  tau.sq.beta.ig = list(0.1, 0.1),
  tau.sq.alpha.ig = list(0.1, 0.1),
  sigma.sq.mu.ig = list(0.1, 0.1),
  sigma.sq.p.ig = list(0.1, 0.1)
)

inits <- list()

#pca of each globe plot (morph, function, phylo?) look into proportion transformation for pca

out <- lfMsDS(
  abund.formula = abund_formula,
  det.formula = det_formula,
  data = data_list,
  inits = inits,
  priors = priors,
  tuning = list(
    beta = 0.1,
    alpha = 0.1,
    #beta.star = 0.1,   #required because of random effects in abundance
    alpha.star = 0.1,  #required because of random effects in detection
    w = 0.1,           #latent factor scores (site-level effects)
    lambda = 0.1       #latent factor loadings (species-level effects)
  ),
  n.factors = 3,
  n.batch = 500,
  batch.length = 25,
  accept.rate = 0.43,
  family = "Poisson",
  transect = "point",
  det.func = "halfnormal",
  n.omp.threads = 1,
  verbose = TRUE,
  n.report = 50,
  n.burn = round(0.1 * 500 * 25),
  n.thin = 1,
  n.chains = 1
)

# Extract the summary output

# Rearrange dimensions to [site, species, sample]
N_array <- aperm(out$N.samples, c(3, 2, 1))  # [32, 13, 11250]

# Step 2: Summarize posterior for each site × species
summary_list <- apply(N_array, c(1, 2), function(x) {
  c(mean = mean(x),
    lower = quantile(x, 0.025),
    upper = quantile(x, 0.975))
})
# Step 3: Reshape the summary into long format
# summary_list is now 3 x 32 x 13 → transpose appropriately
summary_df <- as.data.frame.table(summary_list)
colnames(summary_df) <- c("stat", "site_index", "species", "value")

# Replace species labels with actual species names
summary_df$species <- factor(summary_df$species, 
                             levels = LETTERS[1:length(out$sp.names)],
                             labels = out$sp.names)


# Pivot wider: one row per site × species with mean, lower, upper
summary_wide <- summary_df %>%
  pivot_wider(names_from = stat, values_from = value) %>%
  mutate(site_index = as.integer(site_index))

# Step 4: Add site info (ensure order matches input)
site_info <- pc %>%
  select(point_id, site_abb, site_name) %>%
  distinct() %>%
  mutate(site_index = row_number())

plot_df <- left_join(summary_wide, site_info, by = "site_index")
colnames(plot_df) <- c("site_index","species","mean","lower","upper","point_id","site_abb","site_name")
# Plot




```



## Summary plots for results thus far...

```{r}
#| echo: false
#| message: false

#plotting


ggplot(plot_df, aes(x = factor(point_id), y = mean, fill = species)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_errorbar(aes(ymin = lower, ymax = upper),
                position = position_dodge(width = 0.9),
                width = 0.3) +
  facet_wrap(~ species, scales = "free_y") +
  theme_bw() +
      theme(
      axis.title = element_blank(),  # removes x and y axis titles
      legend.position = "none"  # Hide legends from individual plots
    ) +    
  geom_vline(xintercept = 7.5, linetype="dotted", 
                color = "black", linewidth=1.5)+
  geom_vline(xintercept = 14.5, linetype="dotted", 
                color = "black", linewidth=1.5)+
  geom_vline(xintercept = 23.5, linetype="dotted", 
                color = "black", linewidth=1.5)+
  scale_y_continuous(expand=c(0, 0))+ 
  labs(x = "Point ID", y = "Estimated Abundance", fill = "Species") +
  theme(axis.text.x = element_text(angle = 90))
# to save it call it object g and run the next line
#ggsave("point_count_densities.png",g,dpi=300,height=7,width=9)
```

This plot (above) shows the abundance estimates for cavity nesting species at each study site (separated by vertical dashed lines). This data represents only March and April 2025 since that's what we have entered into excel thus far. Species estimates are shown with their corresponding 95% credible intervals.



# How long should a point count be?

In this study we are doing 10min point counts. It could be that 10min is too long, and most of the species we detect will be detected in a shorter amount of time. If so, we may be able to do shorter point counts but we don't want to risk lowering our detection of birds that are more difficult to detect (those that are quiet or rare). Let's look at a simple species accumulation curve...

```{r}
#| echo: false
#| include: false
#| message: false

#how long is long enough for a point count? an analysis in unmarked


# convert mm:ss to numeric minutes
pc_clean <- pc %>%
  mutate(
    time_mins = as.numeric(ms(time_detected)) / 60  
  )

# Step 1: Keep only the FIRST detection per species per visit (point_id + visit)
pc_unique <- pc_clean %>%
  arrange(point_id, visit, species, time_mins) %>%
  group_by(point_id, visit, species) %>%
  slice_head(n = 1) %>%  # keep only first detection per species per visit
  ungroup()

# Step 2: Bin by time again
pc_binned <- pc_unique %>%
  mutate(time_bin = cut(time_mins,
                        breaks = seq(0, 10, by = 2),
                        labels = c("0-2", "2-4", "4-6", "6-8", "8-10"),
                        right = FALSE))

# Step 3: Count number of species per visit per time bin
richness_per_visit <- pc_binned %>%
  group_by(point_id, visit, time_bin) %>%
  summarise(richness = n_distinct(species), .groups = "drop")

# Step 4: Pivot and calculate cumulative richness
richness_wide <- richness_per_visit %>%
  pivot_wider(names_from = time_bin, values_from = richness, values_fill = 0)


#
# Time bin order
time_bin_order <- c("0-2", "2-4", "4-6", "6-8", "8-10")

# Extract just the time bin values, do row-wise cumsum, and bind back
richness_cum <- richness_wide %>%
  select(point_id, visit, all_of(time_bin_order)) %>%
  mutate(across(all_of(time_bin_order), as.numeric))  # ensure numeric just in case

# Apply row-wise cumsum to only the bin columns
cumulative_bins <- t(apply(richness_cum[time_bin_order], 1, cumsum))  # returns a matrix

# Bind back to original identifiers
richness_cum_final <- bind_cols(
  richness_wide %>% select(point_id, visit),
  as.data.frame(cumulative_bins)
)

# Set correct column names
colnames(richness_cum_final)[-(1:2)] <- time_bin_order

# Check
head(richness_cum_final)


#



# Step 5: Average across visits per point
richness_mean_by_plot <- richness_cum_final %>%
  group_by(point_id) %>%
  summarise(across(`0-2`:`8-10`, mean), .groups = "drop")

# Reshape to long format for plotting
richness_long <- richness_mean_by_plot %>%
  pivot_longer(cols = `0-2`:`8-10`, names_to = "TimeBin", values_to = "MeanRichness")

# Ensure time bins are ordered properly
richness_long$TimeBin <- factor(richness_long$TimeBin, levels = c("0-2", "2-4", "4-6", "6-8", "8-10"))

richness_overall <- richness_long %>%
  group_by(TimeBin) %>%
  summarise(MeanRichness = mean(MeanRichness))



```

```{r}
#| echo: false
#| message: false

#plot the curve
ggplot(richness_long, aes(x = TimeBin, y = MeanRichness, group = factor(point_id), color = factor(point_id))) +
  geom_line(alpha = 0.3) +
  geom_line(data = richness_overall, aes(x = TimeBin, y = MeanRichness, group = 1), color = "black", size = 1.5) +
  labs(
    title = "",
    x = "Time Bin (min)",
    y = "Mean Cumulative Species Richness"
  ) +
  scale_y_continuous(breaks = c(0:7),limits = c(0, 7), expand = c(0, 0))+
  theme_bw() +
  theme(legend.position = "none")
```

Looks like modest accumulation with no sharp increase and plateau seen across plots with some variation between plots. The variation between plots could be random noise.

# Point count schedule by month

The following are the scheduled order of point counts to conduct per visit to the site. This ensures that community data obtained isn't biased by lower or higher detections thoughout the day.

## April

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "April"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## May

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "May"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## June

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "June"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## July

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "July"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```

## August

### Arcadia

```{r}
#| echo: false
#| message: false
loc <- "ARCA"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Arcadia", "in", mon)))
```

### Greenwood

```{r}
#| echo: false
#| message: false
loc <- "GREN"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Greenwood", "in", mon)))
```

### Livingston

```{r}
#| echo: false
#| message: false
loc <- "LIVI"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Livingston Place", "in", mon)))
```

### Tall Timbers

```{r}
#| echo: false
#| message: false
loc <- "TTRS"
mon <- "August"
month_data <- survey %>%
      filter(location == loc, month_name == mon)
# Print the table for the specific location and month
print(kable(month_data, caption = paste("Order for Tall Timbers", "in", mon)))
```
